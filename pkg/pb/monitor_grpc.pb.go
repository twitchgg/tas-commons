// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pkg/proto/monitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServiceClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (MonitorService_ReportClient, error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) Report(ctx context.Context, opts ...grpc.CallOption) (MonitorService_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitorService_ServiceDesc.Streams[0], "/MonitorService/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorServiceReportClient{stream}
	return x, nil
}

type MonitorService_ReportClient interface {
	Send(*OIDRequest) error
	CloseAndRecv() (*OIDReply, error)
	grpc.ClientStream
}

type monitorServiceReportClient struct {
	grpc.ClientStream
}

func (x *monitorServiceReportClient) Send(m *OIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorServiceReportClient) CloseAndRecv() (*OIDReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OIDReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorServiceServer is the server API for MonitorService service.
// All implementations should embed UnimplementedMonitorServiceServer
// for forward compatibility
type MonitorServiceServer interface {
	Report(MonitorService_ReportServer) error
}

// UnimplementedMonitorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (UnimplementedMonitorServiceServer) Report(MonitorService_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}

// UnsafeMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServiceServer will
// result in compilation errors.
type UnsafeMonitorServiceServer interface {
	mustEmbedUnimplementedMonitorServiceServer()
}

func RegisterMonitorServiceServer(s grpc.ServiceRegistrar, srv MonitorServiceServer) {
	s.RegisterService(&MonitorService_ServiceDesc, srv)
}

func _MonitorService_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServiceServer).Report(&monitorServiceReportServer{stream})
}

type MonitorService_ReportServer interface {
	SendAndClose(*OIDReply) error
	Recv() (*OIDRequest, error)
	grpc.ServerStream
}

type monitorServiceReportServer struct {
	grpc.ServerStream
}

func (x *monitorServiceReportServer) SendAndClose(m *OIDReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorServiceReportServer) Recv() (*OIDRequest, error) {
	m := new(OIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorService_ServiceDesc is the grpc.ServiceDesc for MonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _MonitorService_Report_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/monitor.proto",
}
